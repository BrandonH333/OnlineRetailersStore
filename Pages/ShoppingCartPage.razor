@page "/shopping-cart/{UserId}"
@using OnlineRetailersStore.Data.Models
@using OnlineRetailersStore.Data
@inject NavigationManager nav

@code {
    [Parameter] public string UserId { get; set; }
    UserInformation userInfo;
    bool alertVisible = false;
    Sidebar sidebar;
    string home;
    string account;
    string shoppingCart;
    string orderHistory;
    string product;
    string checkout;
    decimal totalPrice = 0;
    private List<bool> readMoreList = new List<bool>();
    List<ShoppingCart> shoppingCartList = new List<ShoppingCart>();
    List<Product> productList = new List<Product>();
    List<int> quantityList = new List<int>();
    private Modal modalRef;

    //FOR REMOVING SHOPPING CART ITEM VARIABLES
    string shoppingCartIDToRemove;
    string productIDToUpdate;
    int quantityToRemove;
    int currentQuantity;
    int currentShoppingCartIndexForRemoval;
    //-----

    protected override async Task OnInitializedAsync()
    {

        if (!string.IsNullOrEmpty(UserId))
        {
            home = $"home/{UserId}";
            account = $"account/{UserId}";
            product = $"products/{UserId}";
            checkout = $"checkout/{UserId}";
            shoppingCart = $"shopping-cart/{UserId}";
            orderHistory = $"order-history/{UserId}";


            shoppingCartList = ShoppingCartService.GetShoppingCartList(UserId);
            for (int i = 0; i < shoppingCartList.Count(); i++)
            {
                string productId = shoppingCartList[i].ProductId;
                productList.Add(ProductService.GetProduct(productId));
                quantityList.Add(shoppingCartList[i].Quantity);
            }
            for (int i = 0; i < productList.Count(); i++)
            {

                readMoreList.Add(false);
            }
            RecalculateTotalPrice();
        }
        else
        {            
            home = "/";
            account = "/";
            shoppingCart = "/";
            orderHistory = "/";
        }
    }
    private void ShowRemoveConfirmation(int shoppingCartIndex, string shoppingCartID, string productId, int inventory, int quantity)
    {
        currentShoppingCartIndexForRemoval = shoppingCartIndex;
        shoppingCartIDToRemove = shoppingCartID;
        quantityToRemove = quantity;
        productIDToUpdate = productId;
        currentQuantity = inventory;
        modalRef.Show();
    }

    private void HideModal()
    {
        modalRef.Hide();
    }

    private void RemoveItemFromShoppingCart()
    {
        //shoppingCartList.RemoveAt(currentShoppingCartIndexForRemoval);
        //quantityList.RemoveAt(currentShoppingCartIndexForRemoval);

        ShoppingCartService.DeleteShoppingCartItem(shoppingCartIDToRemove);
        ShoppingCartService.UpdateProductQuantityAfterRemoval(productIDToUpdate, currentQuantity, quantityToRemove);
        modalRef.Hide();
        nav.NavigateTo(shoppingCart, true);
    }


    private void AddQuantity(int index)
    {
        if (productList[index].Inventory == 0) return; //do not let you add more to cart
        quantityList[index]++;
        ShoppingCartService.UpdateQuantityForCart(productList[index].Id, quantityList[index], UserId);
        ShoppingCartService.TakeAwayQuantityForProduct(productList[index].Inventory, productList[index].Id, quantityList[index], UserId);
        productList[index].Inventory--;
        //shoppingCartList = ShoppingCartService.GetShoppingCartList(UserId);
        RecalculateTotalPrice();
    }
    private void RemoveQuantity(int index)
    {
        if (quantityList[index] == 1) return;
        quantityList[index]--;
        ShoppingCartService.UpdateQuantityForCart(productList[index].Id, quantityList[index], UserId);
        ShoppingCartService.AddQuantityForProduct(productList[index].Inventory, productList[index].Id, quantityList[index], UserId);
        productList[index].Inventory++;
        //shoppingCartList = ShoppingCartService.GetShoppingCartList(UserId);
        RecalculateTotalPrice();
    }
    protected string CutText(object text, int length)
    {
        if (DBNull.Value == text || text == null) return "";
        string txt = text.ToString();
        if (txt.Length <= length) return txt;
        return txt.Substring(0, length);
    }
    private void SetReadMore(bool value, int index)
    {
        readMoreList[index] = value;
    }

    private void RecalculateTotalPrice()
    {
        totalPrice = 0;
        @for (int size = 0; size < productList.Count(); size++)
        {
            var product = productList[size];
            totalPrice += product.Price * quantityList[size];
        }
    }
}

<div class="sidebar-nav">
    <Sidebar @ref="sidebar">
        <SidebarContent>
            <SidebarBrand>
                <a href="@home">Online Retailers Store</a>
            </SidebarBrand>
            <SidebarNavigation>
                <SidebarItem>
                    <SidebarLink To=@home Title="Home">
                        <Icon Name="IconName.Home" Margin="Margin.Is3.FromRight" />Home
                    </SidebarLink>
                </SidebarItem>
                <SidebarItem>
                    <SidebarLink To=@account Title="Accounts">
                        <Icon Name="IconName.Fingerprint" Margin="Margin.Is3.FromRight" />Account
                    </SidebarLink>
                </SidebarItem>
                <SidebarItem>
                    <SidebarLink To=@product Title="Product">
                        <Icon Name="IconName.Gift" Margin="Margin.Is3.FromRight" />Products
                    </SidebarLink>
                </SidebarItem>
                <SidebarItem>
                    <SidebarLink Title="Shopping Cart">
                        <Icon Name="IconName.ShoppingCart" Margin="Margin.Is3.FromRight" />Shopping Cart
                    </SidebarLink>
                </SidebarItem>
                <SidebarItem>
                    <SidebarLink To=@orderHistory Title="Order History">
                        <Icon Name="IconName.History" Margin="Margin.Is3.FromRight" />Order History
                    </SidebarLink>
                </SidebarItem>
                <SidebarItem>
                    <SidebarLink To="/" Title="Sign out">
                        <Icon Name="IconName.User" Margin="Margin.Is3.FromRight" />Sign out
                    </SidebarLink>
                </SidebarItem>
            </SidebarNavigation>
        </SidebarContent>
    </Sidebar>
</div>


@if (!string.IsNullOrEmpty(UserId))
{
    <h2 class="center-header">
        <Alert Color="Color.Primary" Visible="true" Style="overflow-wrap">
            Shopping Cart
        </Alert>
    </h2>
}
else
{
    <h2 class="center-header">Create Account</h2>
}





@for (int size = 0; size < productList.Count(); size++)
{
    var localSize = size;
    var product = productList[size];
    bool inStock = productList[localSize].Inventory > 0;

    <Card>
        <Row Style="margin: 10px; padding-left: 25px">
            <Image Class="shopping-cart-image" src="@product.ImageSrc"></Image>
            <Column Style="margin-left: 10px">

                <Row Style="font-size: 20px; font-weight: bold">@product.Name</Row>
                <Row>Price: $@product.Price</Row>
                <Row Style="float: right">
                    <Button Color="Color.Secondary" Style="margin-right: 10px;font-size: 20px; font-weight: bolder" Clicked="() => AddQuantity(localSize)">+</Button>
                    <text style="background-color:whitesmoke;display:inline-table;margin-top: 9px">@quantityList[localSize]</text>
                    <Button Color="Color.Secondary" Style="margin-left: 10px;font-size: 20px; font-weight: bolder" Clicked="() => RemoveQuantity(localSize)">-</Button>
                </Row>
                <Row Style="float: left">
                    <div style="color: green">In Stock</div>
                </Row>
                <Row Style="float: right; margin-top: 50px;">
                    <Button Outline Style="margin-right: -75px;font-size: 10px; font-weight: bolder" Clicked="() => ShowRemoveConfirmation(localSize, shoppingCartList[localSize].Id, product.Id, product.Inventory, quantityList[localSize])"><span style="color: darkred">Remove</span> from cart.</Button>
                </Row>


            </Column>
        </Row>
    </Card>
}

<Modal @ref="modalRef">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>Confirmation</ModalTitle>

        </ModalHeader>
        <ModalBody>
            Are you sure you would like to remove item from cart?
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">No</Button>
            <Button Color="Color.Primary" Clicked="@RemoveItemFromShoppingCart">Yes</Button>
</ModalFooter>
    </ModalContent>
</Modal>

<div style="text-align: right;font-size: 20px">Subtotal (@productList.Count item): $@totalPrice</div>
<Row style="float: right"><SidebarLink To="@checkout"><Button Color="Color.Primary" style="width: 250px; height: 100px"> Buy now</Button></SidebarLink></Row>