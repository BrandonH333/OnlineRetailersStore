@page "/shopping-cart/{UserId}"
@using OnlineRetailersStore.Data.Models
@using OnlineRetailersStore.Data
@inject NavigationManager nav

@code {
    [Parameter] public string UserId { get; set; }
    UserInformation userInfo;
    bool alertVisible = false;
    Sidebar sidebar;
    string home;
    string account;
    string shoppingCart;
    string orderHistory;
    string product;
    string checkout;
    string manageProducts;
    decimal totalPrice = 0;
    private List<bool> readMoreList = new List<bool>();
    List<ShoppingCart> shoppingCartList = new List<ShoppingCart>();
    List<Product> productList = new List<Product>();
    List<int> quantityList = new List<int>();

    protected override async Task OnInitializedAsync()
    {

        if (!string.IsNullOrEmpty(UserId))
        {
            // Query for customer info so we can set the object and pass into data bindings into the blazorise front end component library below
            userInfo = UserService.GetUserInformationById(UserId);
            home = $"home/{UserId}";
            account = $"account/{UserId}";
            product = $"products/{UserId}";
            checkout = $"checkout/{UserId}";
            shoppingCart = $"shopping-cart/{UserId}";
            orderHistory = $"order-history/{UserId}";


            shoppingCartList = ShoppingCartService.GetShoppingCartList(UserId);
            for (int i = 0; i < shoppingCartList.Count(); i++)
            {
                string productId = shoppingCartList[i].ProductId;
                productList.Add(ProductService.GetProduct(productId));
                quantityList.Add(shoppingCartList[i].Quantity);
            }
            for (int i = 0; i < productList.Count(); i++)
            {

                readMoreList.Add(false);
            }
        }
        else
        {
            userInfo = new UserInformation();
            userInfo.BankAccount.ExpirationDate = DateTime.Now;
            home = "/";
            account = "/";
            shoppingCart = "/";
            orderHistory = "/";
        }
    }

    private void AddQuantity(int index)
    {
        quantityList[index]++;
    }
    private void RemoveQuantity(int index)
    {
        if (quantityList[index] == 0) return;
        quantityList[index]--;
    }
    protected string CutText(object text, int length)
    {
        if (DBNull.Value == text || text == null) return "";
        string txt = text.ToString();
        if (txt.Length <= length) return txt;
        return txt.Substring(0, length);
    }
    private void SetReadMore(bool value, int index)
    {
        readMoreList[index] = value;
    }
}

<div class="sidebar-nav">
    <Sidebar @ref="sidebar">
        <SidebarContent>
            <SidebarBrand>
                <a href="/products">Online Retailers Store</a>
            </SidebarBrand>
            <SidebarNavigation>
                <SidebarItem>
                    <SidebarLink To=@home Title="Home">
                        <Icon Name="IconName.Home" Margin="Margin.Is3.FromRight" />Home
                    </SidebarLink>
                </SidebarItem>
                <SidebarItem>
                    <SidebarLink To=@account Title="Accounts">
                        <Icon Name="IconName.Fingerprint" Margin="Margin.Is3.FromRight" />Account
                    </SidebarLink>
                </SidebarItem>
                <SidebarItem>
                    <SidebarLink To=@product Title="Product">
                        <Icon Name="IconName.Gift" Margin="Margin.Is3.FromRight" />Products
                    </SidebarLink>
                </SidebarItem>
                <SidebarItem>
                    <SidebarLink Title="Shopping Cart">
                        <Icon Name="IconName.ShoppingCart" Margin="Margin.Is3.FromRight" />Shopping Cart
                    </SidebarLink>
                </SidebarItem>
                <SidebarItem>
                    <SidebarLink To=@orderHistory Title="Order History">
                        <Icon Name="IconName.History" Margin="Margin.Is3.FromRight" />Order History
                    </SidebarLink>
                </SidebarItem>
                <SidebarItem>
                    <SidebarLink To="/" Title="Sign out">
                        <Icon Name="IconName.User" Margin="Margin.Is3.FromRight" />Sign out
                    </SidebarLink>
                </SidebarItem>
            </SidebarNavigation>
        </SidebarContent>
    </Sidebar>
</div>


@if (!string.IsNullOrEmpty(UserId))
{
    <h2 class="center-header">
        <Alert Color="Color.Primary" Visible="true" Style="overflow-wrap">
            Shopping Cart
        </Alert>
    </h2>
}
else
{
    <h2 class="center-header">Create Account</h2>
}





@for (int size = 0; size < productList.Count(); size++)
{
    var localSize = size;
    var product = productList[size];
    bool inStock = productList[localSize].Inventory > 0;
    totalPrice += product.Price*quantityList[size];
<Card>
    <Row Style="margin: 10px; padding-left: 25px">
        <Image Class="shopping-cart-image" src="@product.ImageSrc"></Image>
        <Column Style="margin-left: 10px">

            <Row Style="font-size: 20px; font-weight: bold">@product.Name</Row>
            <Row>Price: @product.Price</Row>
            <Row>Quantity: @quantityList[localSize]</Row>
            <Row>
                    <div style="color: green">In Stock</div>
            </Row>
        </Column>
    </Row>
</Card>
}
<div style="text-align: right;font-size: 20px">Subtotal (@productList.Count item): $@totalPrice</div>
<Row style="float: right"><SidebarLink To="@checkout"><Button Color="Color.Primary" style="width: 250px; height: 100px"> Buy now</Button></SidebarLink></Row>