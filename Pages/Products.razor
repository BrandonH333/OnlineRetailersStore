@page "/products/{UserId}"
@using OnlineRetailersStore.Data.Models
@using OnlineRetailersStore.Data
@inject NavigationManager nav

@code {
    [Parameter] public string UserId { get; set; }
    UserInformation userInfo;
    bool alertVisible = false;
    Sidebar sidebar;
    string home;
    string account;
    string shoppingCart;
    string orderHistory;
    string manageProducts;
    private List<bool> readMoreList = new List<bool>();
    List<ShoppingCart> shoppingCartList = new List<ShoppingCart>();
    List<Product> productList = new List<Product>();
    List<int> quantityList = new List<int>();
    // reference to the modal component
    private Modal modalRef;

    protected override async Task OnInitializedAsync()
    {

        if (!string.IsNullOrEmpty(UserId))
        {
            // Query for customer info so we can set the object and pass into data bindings into the blazorise front end component library below
            userInfo = UserService.GetUserInformationById(UserId);
            home = $"home/{UserId}";
            account = $"account/{UserId}";
            shoppingCart = $"shopping-cart/{UserId}";
            orderHistory = $"order-history/{UserId}";

            productList = ProductService.GetProductList();
            shoppingCartList = ShoppingCartService.GetShoppingCartList(UserId);
            for (int i = 0; i < productList.Count(); i++)
            {
                int quant = 1; //New quantity of 0
                quantityList.Add(quant); //Populate quantityList  with 0s
                readMoreList.Add(false);
            }
        }
        else
        {
            userInfo = new UserInformation();
            userInfo.BankAccount.ExpirationDate = DateTime.Now;
            home = "/";
            account = "/";
            shoppingCart = "/";
            orderHistory = "/";
        }
    }

    private void AddQuantity(int index)
    {
        if (quantityList[index] == productList[index].Inventory) return;
        quantityList[index]++;
    }
    private void RemoveQuantity(int index)
    {
        if (quantityList[index] == 1) return;
        quantityList[index]--;
    }
    protected string CutText(object text, int length)
    {
        if (DBNull.Value == text || text == null) return "";
        string txt = text.ToString();
        if (txt.Length <= length) return txt;
        return txt.Substring(0, length);
    }
    private void SetReadMore(bool value, int index)
    {
        readMoreList[index] = value;
    }

    private void AddProductToShoppingCart(int productIndex, int quantity)
    {
        int quantityIndex = productIndex;
        productList[productIndex].Inventory -= quantity;
        if(quantityList[quantityIndex] >= productList[productIndex].Inventory)
        {
            quantityList[quantityIndex] = productList[productIndex].Inventory;
        }
        if(productList[productIndex].Inventory == 0)
        {
            quantityList[quantityIndex] = 0;
        }
        ProductService.UpdateQuantityForProduct(productList[productIndex].Id, productList[productIndex].Inventory);
        ProductService.AddProductToShoppingCart(shoppingCartList, productList[productIndex].Id, productIndex, quantity, UserId);
        shoppingCartList = ShoppingCartService.GetShoppingCartList(UserId);
        ShowModal();
    }

    private void ShowModal()
    {
        modalRef.Show();
    }

    private void HideModal()
    {
        modalRef.Hide();
    }
}

<div class="sidebar-nav">
    <Sidebar @ref="sidebar">
        <SidebarContent>
            <SidebarBrand>
                <a href="@home">Online Retailers Store</a>
            </SidebarBrand>
            <SidebarNavigation>
                <SidebarItem>
                    <SidebarLink To=@home Title="Home">
                        <Icon Name="IconName.Home" Margin="Margin.Is3.FromRight" />Home
                    </SidebarLink>
                </SidebarItem>
                <SidebarItem>
                    <SidebarLink To=@account Title="Accounts">
                        <Icon Name="IconName.Fingerprint" Margin="Margin.Is3.FromRight" />Account
                    </SidebarLink>
                </SidebarItem>
                <SidebarItem>
                    <SidebarLink Title="Product">
                        <Icon Name="IconName.Gift" Margin="Margin.Is3.FromRight" />Products
                    </SidebarLink>
                </SidebarItem>
                <SidebarItem>
                    <SidebarLink To=@shoppingCart Title="Shopping Cart">
                        <Icon Name="IconName.ShoppingCart" Margin="Margin.Is3.FromRight" />Shopping Cart
                    </SidebarLink>
                </SidebarItem>
                <SidebarItem>
                    <SidebarLink To=@orderHistory Title="Order History">
                        <Icon Name="IconName.History" Margin="Margin.Is3.FromRight" />Order History
                    </SidebarLink>
                </SidebarItem>
                <SidebarItem>
                    <SidebarLink To="/" Title="Sign out">
                        <Icon Name="IconName.User" Margin="Margin.Is3.FromRight" />Sign out
                    </SidebarLink>
                </SidebarItem>
            </SidebarNavigation>
        </SidebarContent>
    </Sidebar>
</div>


@if (!string.IsNullOrEmpty(UserId))
{
    <h2 class="center-header">
        <Alert Color="Color.Primary" Visible="true" Style="overflow-wrap">
            Products
        </Alert>
    </h2>
}
else
{
    <h2 class="center-header">Create Account</h2>
}



<div class="product-wrap">
    <Row>

        @for (int size = 0; size < productList.Count(); size++)
        {
            var localSize = size;
            bool inStock = productList[localSize].Inventory > 0;
            <Column ColumnSize="ColumnSize.Is3">
                <Card>
                    <CardImage Source=@productList[localSize].ImageSrc Alt="Placeholder image" Class="product-image">
                    </CardImage>

                    <CardBody>
                        <CardTitle Size="5" Weight="TextWeight.Bold">@productList[localSize].Name</CardTitle>
                        <CardTitle Size="5" Weight="TextWeight.Bold">$@productList[localSize].Price</CardTitle>
                        @if (productList[localSize].Inventory > 0)
                        {
                            <Row Gutter="(32, 16)">
                                <Column ColumnSize="ColumnSize.Is5">
                                    <CardText Style="color: green; font-size:14px"> In stock </CardText>
                                </Column>
                                <Column ColumnSize="ColumnSize.Is7">
                                    <CardText Style="font-size:16px"> Quantity: @productList[localSize].Inventory</CardText>

                                </Column>
                            </Row>
                        }
                        @if (productList[localSize].Inventory <= 0)
                        {
                    <Row Gutter="(32, 16)">
                        <Column ColumnSize="ColumnSize.Is5">
                            <CardText Style="color: red; font-size:14px"> Out of stock </CardText>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is7">
                            <CardText Style="font-size:16px"> Quantity: @productList[localSize].Inventory</CardText>

                        </Column>
                    </Row>
                        }
                        @if (productList[localSize].Description.Length > 120 && !readMoreList[localSize])
                        {
                            @CutText(productList[localSize].Description, 120)
                            <Button Clicked="() => SetReadMore(true, localSize)">...read more</Button>
                        }
                        @if (readMoreList[localSize])
                        {
                            @productList[localSize].Description
                            <Button Clicked="() => SetReadMore(false, localSize)">...read less</Button>
                        }
                        <CardText></CardText>



                        <Button Color="Color.Secondary" Style="font-size: 20px; font-weight: bolder" Clicked="() => AddQuantity(localSize)">+</Button>
                        <text style="background-color:whitesmoke;display:inline-table">@quantityList[localSize]</text>
                        <Button Color="Color.Secondary" Style="font-size: 20px; font-weight: bolder" Clicked="() => RemoveQuantity(localSize)">-</Button>
                        <Button Color="Color.Primary" Style="float: right;font-size: 20px; width: 75px" Disabled="!inStock" Clicked="() => AddProductToShoppingCart(localSize, quantityList[localSize])">Buy</Button>
                    </CardBody>
                </Card>
            </Column>
        }

    </Row>

    <Modal @ref="modalRef">
        <ModalContent Centered="true">

            <ModalBody Style="">
                <Row>
                    <Column ColumnSize="ColumnSize.Is11"><div style="color: lawngreen">Added to shopping cart succesfully</div></Column>
                    <CloseButton Style="align-items: right"/>
                </Row>
            </ModalBody>

        </ModalContent>
    </Modal>

</div>